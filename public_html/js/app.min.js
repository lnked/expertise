var app = app || {};

(function(body){
    "use strict";

    app = {
        
        init: function() {
            this.map.init();
            this.faq.init();
            this.fixmenu.init();
        }

    };

})(document.body);
var app = app || {};

(function(body){
    "use strict";

    app.faq = {

        init: function() {
            $('body').on('click', '.j-faq-trigger', function(e){
                e.preventDefault();

                var $faq = $(this).closest('.j-faq');
                $faq.toggleClass('_open');

                return !1;
            });
        }

    };

})(document.body);
var app = app || {};

(function(body){
    "use strict";

    app.fixmenu = {
        
        fixMenu: function($menu, t) {

            if (t >= (159)) {
                if (!$menu.hasClass('_sticked')) {
                    $menu.addClass('_sticked');
                }
            }
            else {
                if ($menu.hasClass('_sticked')) {
                    $menu.removeClass('_sticked');
                }
            }
            
        },

        init: function() {
            var $element = $('#navigation'),
                that = this;

            that.fixMenu($element, $(window).scrollTop());

            $(window).on('scroll', function(){
                that.fixMenu($element, $(window).scrollTop());
            });
        }

    };

})(document.body);
var app = app || {};

(function(body){
    "use strict";

    app.map = {
        
        _mapObject: null,

        _geoObject: null,

        getData: function($element) {
            var x, wrap_id = null, coords = null;

            if ($element.data('coords')) {
                coords = $element.data('coords').split(',');

                for (x in coords) {
                    coords[x] = $.trim(coords[x]);
                }

                if (coords.length !== 2) {
                    coords = null;
                }
            }

            if ($element.attr('id')) {
                wrap_id = $element.attr('id');
            }

            return {
                id: wrap_id,
                coords: coords
            }
        },

        drowMap: function($element) {
            
            var that = this, data = this.getData($element);

            ymaps.ready(function(){

                that._mapObject = new ymaps.Map(data.id, {
                    center: [data.coords[0], data.coords[1]],
                    zoom: 13,
                    controls: ['zoomControl', 'searchControl', 'typeSelector', 'fullscreenControl']
                }),

                that._mapObject.behaviors.disable('scrollZoom');

                that._mapObject.controls.get('zoomControl').options.set('size', 'small');
                that._mapObject.controls.get('zoomControl').options.set('position', { right: 10, top: 50 });

                that._mapObject.geoObjects
                    .add(new ymaps.Placemark([data.coords[0], data.coords[1]], {}, {
                        preset: 'islands#dotIcon',
                        iconColor: '#735184'
                    }))

            });

        },

        init: function() {
            var that = this;

            if ($('.j-map').length) {
                $('.j-map').each(function(){
                    that.drowMap($(this));
                });
            }
        }

    };

})(document.body);
// ;(function ($) {
//     "use strict";

//     $.app = $.app || {};

//     var _this;

//     $.app.sandwich = {

//         config: {
//             keyHooks: !1,
//             selector: '.js-sandwich-menu',
//             wrapper: '.layout-wrapper',
//             overlay: '.overlay'
//         },

//         extend: function(config)
//         {
//             _this = this;

//             if (typeof config !== 'undefined')
//             {
//                 var x;
//                 for (x in config)
//                 {
//                     if (typeof _this.config[x] !== 'undefined')
//                         _this.config[x] = config[x];
//                 }
//             }
//         },

//         isOpen: function()
//         {
//             return body.hasClass('page-visible');
//         },

//         hide: function()
//         {
//             body.removeClass('page-open');

//             setTimeout(function(){
//                 body.removeClass('page-visible');
//             }, 10);

//             $(this.config.overlay).css({
//                 'visibility': 'hidden'
//             });
//         },

//         toggle: function()
//         {
//             if (body.hasClass('page-visible'))
//             {
//                 setTimeout(function(){
//                     body.removeClass('page-visible');
//                 }, 10);
//             }
//             else
//             {
//                 setTimeout(function(){
//                     body.addClass('page-visible');
//                 }, 10);
//             }

//             body.toggleClass('page-open');

//             var visibility = 'visible';

//             if (!body.hasClass('page-open'))
//             {
//                 visibility = 'hidden'
//             }
            
//             $(_this.config.overlay).css({
//                 'visibility': visibility
//             });
//         },

//         sandwichTrigger: function()
//         {
//             _this = this;

//             if (_this.config.keyHooks)
//             {
//                 body.on('keydown', function(e) {
//                     if(e.keyCode == 27 && _this.isOpen())
//                     {
//                         _this.toggle();
//                     }
//                 });
//             };

//             body.on('click', _this.config.selector, function(e){
//                 e.preventDefault ? e.preventDefault() : e.returnValue = false;
//                 _this.toggle();
//             });
//         },

//         overlayTrigger: function()
//         {
//             _this = this;

//             body.on('click', _this.config.overlay, function(e){
//                 _this.hide();
//             });
//         },

//         init: function(config)
//         {
//             this.extend(config);
            
//             this.sandwichTrigger();
//             this.overlayTrigger();
//         }

//     };

// })(jQuery);
//  
"use strict";

$(document).ready(function() {
    app.init();
});
//# sourceMappingURL=data:application/json;base64,
